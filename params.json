{"name":"WebPerformanceChecklist","tagline":"Чек-лист оптимизации скорости загрузки сайта","body":"Чек-лист оптимизации скорости загрузки сайта\r\n====================\r\nИнструменты анализа скорости загрузки сайта с выдачей рекомендаций:\r\n* [GTmetrix](http://gtmetrix.com/)\r\n* [Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\r\n\r\nGTmetrix использует Google Page Speed + Yahoo! YSlow и выдает подробные рекомендации, зато Google PageSpeed Insights проверяет также загрузку на мобильных устройствах.\r\n\r\n## Серверное\r\n1. [Включение gzip](http://gtmetrix.com/enable-gzip-compression.html).\r\n2. Включение кеширования генерации страниц движком сайта.\r\n3. Включение кеширования для файлов, отдаваемых сервером:\r\n  1. [Last-Modifed](http://last-modified.com/ru/)\r\n  2. [Expires headers](http://gtmetrix.com/add-expires-headers.html)\r\n  2. [E-tag](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#validating-cached-responses-with-etags)\r\n  3. [Cache-Control](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#cache-control)\r\n  4. [Vary: Accept-Encoding header](https://www.maxcdn.com/blog/accept-encoding-its-vary-important/)\r\n4. Проверка чтоб не было 404-тых откликов на загрузку ресурсов - они замедляют загрузку.\r\n\r\n##Верстка\r\n5. Подключение CSS должно быть в `<head>`, а JS - в конце HTML, перед `</body>`\r\n6. Минимизировать кол-во загружаемых файлов:\r\n  1. Использовать CSS-спрайты.\r\n  2. Использовать base64-encode.\r\n  3. Объединять все css в один файл.\r\n  4. Объединять все js в один файл.\r\n  5. Использовать только [WOFF](http://caniuse.com/#search=woff) при подключении web fonts.\r\n7. Отложить загрузку данных необязательных для первого отображения страницы:\r\n  1. Использовать defer для стороннего js.\r\n  2. [Вынести кнопки соц. шаринга в пост-загрузку](https://github.com/ideus-team/bem-snippets/blob/master/js-socialSharePreload/README.md).\r\n  3. Использовать LazyLoad для картинок.\r\n  4. Подгружать невидимые при первой загрузке части страницы через AJAX (например содержимое табов)\r\n8. Подгружать js-библиотеки и шрифты с CDN - для использования их версий закешированных с других сайтов и быстрой загрузки с CDN если кеша нет.\r\n9. Перенести внешние баннеры и другие ресурсы подгружаемые со сторонних медленных серверов - на сервер клиента.\r\n10. Минимизировать редиректы для внешних ресурсов (например внешний js отдается не по тому URL, по которому запрашивается, а по редиректу стого URL)\r\n11. Прописать размеры img в html\r\n12. Минимизировать CSS, JS и HTML\r\n13. Оптимизировать графику:\r\n  1. Конвертация типа картинок: \r\n    - png - для строгих цветов,\r\n    - jpg - для полноцвета и градиентов\r\n    - png24 для прозрачностей. \r\n    Возможно где-то можно заменить png24 на png8+matte, а где-то на png24 jpg.\r\n  2. Использовать технику [30% quality Retina JPG](http://www.netvlies.nl/blog/design-interactie/retina-revolution). \r\n  2. Сохранять JPG как progressive\r\n  3. Оптимизировать jpg и png-файлы:\r\n    - с помощью http://compresspng.com/ и http://compressjpeg.com/ (сжимают лучше и быстрей чем консольные утилиты)\r\n    - или с помощь консольных утилит pngout, jpegtrank (в том числе плагинами к Grunt/Gulp)\r\n  4. Перенос визуальных украшений в CSS3 вместо картинок\r\n  5. Объединять несколько рядом стоящих картинок-ссылок в одну картинку, на которую накладываются позиционированные ссылки.\r\n14. Внести правки в дизайн, удалив тяжеловесные элементы.\r\n15. Желательно удалить query string (\"?\") в URL отдаваемых ресурсов (некоторые прокси не кешируют их)","google":"UA-6535082-2","note":"Don't delete this file! It's used internally to help with page regeneration."}